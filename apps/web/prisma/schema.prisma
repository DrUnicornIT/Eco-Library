generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "rhel-openssl-1.0.x"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Guestbook {
  id         BigInt   @id @default(autoincrement())
  email      String   @db.VarChar(256)
  image      String   @db.VarChar(256)
  body       String   @db.VarChar(500)
  created_by String   @db.VarChar(256)
  created_at DateTime @default(now()) @db.DateTime(6)
  updated_at DateTime @default(now()) @db.DateTime(6)
}

model Post {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  slug       String    @unique
  likes      Int       @default(0)
  views      Int       @default(0)
  Comment    Comment[]
}

model LikesSession {
  id         String   @id
  created_at DateTime @default(now())
  likes      Int      @default(0)
}

model Comment {
  id         String          @id @default(cuid())
  body       String          @db.LongText
  user       User            @relation(fields: [userId], references: [id])
  userId     String
  created_at DateTime        @default(now())
  updated_at DateTime        @updatedAt
  Post       Post            @relation(fields: [postId], references: [id])
  postId     String
  replies    Comment[]       @relation("comment_replies")
  parent     Comment?        @relation("comment_replies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId   String?
  isDeleted  Boolean         @default(false)
  upvotes    CommentUpvote[]

  @@index([parentId])
  @@index([postId])
  @@index([userId])
}

model CommentUpvote {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  @@unique([userId, commentId])
  @@index([commentId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?       @map("email_verified")
  image         String?         @db.Text
  accounts      Account[]
  sessions      Session[]
  role          String          @default("user")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  Comment       Comment[]
  CommentUpvote CommentUpvote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
