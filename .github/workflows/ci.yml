name: CI

on:
  push:
    branches:
      - main
  pull_request:

env:
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

jobs:
  ci:
    name: CI
    timeout-minutes: 30
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Check for 'skip ci' in commit messages
        run: |
          if [[ "${{ github.event.head_commit.message }}" == *"[skip-ci]"* && "${{ github.actor }}" == "tszhong0411" ]]; then
            echo "CI checks are skipped as requested."
            exit 0
          fi

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Install dependencies
        run: bun install

      - name: Typecheck
        run: bun run type-check

      - name: Lint
        run: bun run lint

      - name: Test
        run: bun run test -- --coverage

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3

      - name: Get Vercel preview URL
        id: get_preview_url
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const comment = context.payload.comment

            let previewUrl

            if (comment) {
              const regex = /https:\/\/[a-z0-9-]+\.vercel\.app/g
              const matches = comment.body.match(regex)

              let previewUrl = ""

              if (matches && matches.length) {
                previewUrl = matches[0]
                console.log('Preview url found:', previewUrl)
              }

              console.log("No preview url found.")
            } else {
              previewUrl = 'https://honghong.me'
            }

            core.setOutput('vercel_preview_url', previewUrl)

      - name: Add comment to PR
        if: ${{ steps.get_preview_url.outputs.vercel_preview_url != '' }}
        id: loading_comment_to_pr
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          number: ${{ github.event.issue.number }}
          header: lighthouse
          message: |
            Running Lighthouse audit...

      - name: Audit preview URL with Lighthouse
        if: ${{ steps.get_preview_url.outputs.vercel_preview_url != '' }}
        id: lighthouse_audit
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            ${{ steps.get_preview_url.outputs.vercel_preview_url }}
          configPath: '.github/lighthouse.json'
          uploadArtifacts: true
          temporaryPublicStorage: true
      - name: Format lighthouse score
        if: ${{ steps.get_preview_url.outputs.vercel_preview_url != '' }}
        id: format_lighthouse_score
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const result = ${{ steps.lighthouse_audit.outputs.manifest }}[0].summary
            const links = ${{ steps.lighthouse_audit.outputs.links }}

            const formatResult = (res) => Math.round((res * 100))
            Object.keys(result).forEach(key => result[key] = formatResult(result[key]))

            const score = res => res >= 90 ? 'üü¢' : res >= 50 ? 'üü†' : 'üî¥'

            const comment = [
                `‚ö°Ô∏è [Lighthouse report](${Object.values(links)[0]}):`,
                '| Category | Score |',
                '| --- | --- |',
                `| ${score(result.performance)} Performance | ${result.performance} |`,
                `| ${score(result.accessibility)} Accessibility | ${result.accessibility} |`,
                `| ${score(result['best-practices'])} Best practices | ${result['best-practices']} |`,
                `| ${score(result.seo)} SEO | ${result.seo} |`,
                ' '
            ].join('\n')

             core.setOutput("comment", comment);

      - name: Add comment to PR
        if: ${{ steps.get_preview_url.outputs.vercel_preview_url != '' }}
        id: comment_to_pr
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          number: ${{ github.event.issue.number }}
          header: lighthouse
          message: |
            ${{ steps.format_lighthouse_score.outputs.comment }}
